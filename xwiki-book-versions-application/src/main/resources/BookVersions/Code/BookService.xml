<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="BookVersions.Code.BookService" locale="">
  <web>BookVersions.Code</web>
  <name>BookService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Book Service</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>BookVersions.Code.BookService</name>
    <number>0</number>
    <className>XWiki.ScriptComponentClass</className>
    <guid>151037c6-553f-4171-b2f5-f6df0af4ebfc</guid>
    <class>
      <name>XWiki.ScriptComponentClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>2</number>
        <prettyName>Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>|wiki|global|user</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
      <script_content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>script_content</name>
        <number>3</number>
        <prettyName>Script</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </script_content>
      <script_language>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>script_language</name>
        <number>1</number>
        <prettyName>Language</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>groovy|python</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </script_language>
    </class>
    <property>
      <scope>wiki</scope>
    </property>
    <property>
      <script_content>package org.xwiki.bookversions.script

import com.xpn.xwiki.XWikiContext
import com.xpn.xwiki.XWikiException
import com.xpn.xwiki.XWiki
import com.xpn.xwiki.doc.XWikiDocument
import com.xpn.xwiki.objects.BaseObject
import org.xwiki.model.EntityType
import org.xwiki.model.reference.DocumentReference
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.model.reference.SpaceReference
import org.xwiki.query.Query;
import org.xwiki.query.QueryException;
import org.xwiki.query.QueryManager;

import javax.inject.Inject;
import javax.inject.Named
import javax.inject.Provider;
import javax.inject.Singleton;

import org.xwiki.component.annotation.Component;
import org.xwiki.script.service.ScriptService;

@Component
@Named("bookversions")
@Singleton
public class BookVersionsScriptService implements ScriptService
{
    private static final String MAIN_WIKI_NAME = "xwiki";

    private static final EntityReference BOOKVERSIONS_CODE_REFERENCE = new EntityReference("Code", EntityType.SPACE,
        new EntityReference("BookVersions", org.xwiki.model.EntityType.SPACE));

    private static final EntityReference BOOK_CLASS_REFERENCE = new EntityReference("BookClass",
        EntityType.DOCUMENT, BOOKVERSIONS_CODE_REFERENCE);

    private static final EntityReference LIBRARY_CLASS_REFERENCE = new EntityReference("LibraryClass",
        EntityType.DOCUMENT, BOOKVERSIONS_CODE_REFERENCE);

    private static final EntityReference VERSION_CLASS_REFERENCE = new EntityReference("VersionClass",
        EntityType.DOCUMENT, BOOKVERSIONS_CODE_REFERENCE);

    private static final EntityReference BOOK_PAGE_CLASS_REFERENCE = new EntityReference("BookPageClass",
        EntityType.DOCUMENT, BOOKVERSIONS_CODE_REFERENCE);

    @Inject
    private Provider&lt;XWikiContext&gt; xcontextProvider;

    @Inject
    private QueryManager queryManager;

    @Inject
    private DocumentReferenceResolver&lt;String&gt; referenceResolver;

    @Inject
    @Named('local')
    private EntityReferenceSerializer&lt;String&gt; localSerializer;

    /**
     * Check if a page is a nested page of another one, recursively.
     * @param spaceReference: the reference of the supposed space
     * @param nestedReference: the reference of the supposed nested page
     * @return true if the space contains the nested space in one of its sub-spaces.
     */
    boolean isAParent(DocumentReference spaceReference, DocumentReference nestedReference)
    {
        if (spaceReference != null &amp;&amp; nestedReference != null) {
            List&lt;SpaceReference&gt; childSpaces = nestedReference.getSpaceReferences();
            for (SpaceReference parentSpace : spaceReference.getSpaceReferences()) {
                if (childSpaces.contains(parentSpace)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Get the versioned collection (book or library) reference of a given page.
     * @param pageReference: the page from which to take the collection reference
     * @return the versioned collection reference, or null if the page is not part of a collection
     */
    DocumentReference getVersionedCollectionReference(DocumentReference pageReference) throws QueryException
    {
        if (pageReference != null) {
            List&lt;String&gt; collections = this.queryManager.createQuery(", BaseObject as obj where doc.fullName = obj." +
                "name and (obj.className = :bookClass or obj.className = :libraryClass)", Query.HQL).
                bindValue("bookClass", localSerializer.serialize(BOOK_CLASS_REFERENCE)).
                bindValue("libraryClass", localSerializer.serialize(LIBRARY_CLASS_REFERENCE)).
                execute();
            for (String collection : collections) {
                DocumentReference collectionReference = this.referenceResolver.resolve(collection, pageReference);
                if (isAParent(collectionReference, pageReference)) {
                    return collectionReference;
                }
            }
        }
        return null;
    }

    /**
     * Get the version references from a versioned collection (book or library)
     * @param collectionReference: the reference of the collection to get versions from
     * @return a list of versions references declared in the versioned collection, ordered by version page title.
     * Returns an empty list if none are found.
     * @throws QueryException
     */
    List&lt;DocumentReference&gt; getCollectionVersions(DocumentReference collectionReference) throws QueryException
    {
        if (collectionReference != null) {
            SpaceReference collectionSpace = collectionReference.getLastSpaceReference();
            String collectionSpaceSerialized = localSerializer.serialize(collectionSpace);
            String spacePrefix = collectionSpaceSerialized.replaceAll('([%_/])', '/$1').concat('.%');

            // Query inspired from getDocumentReferences of DefaultModelBridge.java in xwiki-platform
            List&lt;DocumentReference&gt; result = this.queryManager.createQuery(", BaseObject as obj where doc.fullName = " +
                "obj.name and obj.className = :versionClass and doc.space like :space escape '/'  order by doc.title", Query.HQL).
                bindValue("versionClass", localSerializer.serialize(VERSION_CLASS_REFERENCE)).
                bindValue("space", spacePrefix).
                execute();
            return result;
        }
        return Collections.emptyList();
    }

    /**
     * Get the reference of the content to be displayed, be it corresponding to the required version, or inherited
     * from another version.
     * @param pageReference: the reference of the page to get the content from
     * @param versionReference: the reference of the version from which to get the content from, or inherit
     * @return the reference of the content to be displayed. Null if there's no versioned content for the page,
     * neither to inherit.
     * @throws QueryException
     * @throws XWikiException
     */
    DocumentReference getVersionedContentReference(DocumentReference pageReference, DocumentReference versionReference) throws QueryException, XWikiException
    {
        if (pageReference != null &amp;&amp; versionReference != null) {
            //TODO: check if the page is unversioned, or not
            XWikiContext xcontext = this.xcontextProvider.get();
            XWiki xwiki = xcontext.getWiki();

            String versionName = versionReference.getName().replaceAll('\\.', '\\.');
            DocumentReference precedingVersionRef = versionReference;
            while (!versionName.isEmpty() &amp;&amp; versionName != null) {
                DocumentReference versionedContentRef = new DocumentReference(
                    new EntityReference(versionName, EntityType.DOCUMENT, pageReference.getParent()));
                if (xwiki.exists(versionedContentRef,xcontext)) {
                    // Content exists for this version of the page
                    return versionedContentRef;
                } else {
                    // Content does not exists for this version. Lets check if there is content in a version to be
                    // inherited
                    XWikiDocument versionDoc = xwiki.getDocument(precedingVersionRef,xcontext);
                    BaseObject versionObject = versionDoc.getXObject(VERSION_CLASS_REFERENCE);
                    if (versionObject == null) {
                        throw new XWikiException("Page ["+ versionDoc.getDocumentReference().toString() +
                            "] doesn't have a [" + VERSION_CLASS_REFERENCE.toString() + "] object.", null)
                    }
                    String precedingVersion = versionObject.getStringValue('precedingVersionReference');
                    if (precedingVersion.isEmpty()) {
                        // This is the first version in the tree, there's nothing to inherit from
                        return null;
                    }
                    precedingVersionRef = this.referenceResolver.resolve(precedingVersion, precedingVersionRef);
                    String precedingVersionName = precedingVersionRef.getName().replaceAll('\\.', '\\.');
                    if (precedingVersionName.equals(versionName)) {
                        throw new XWikiException("Version page [" + precedingVersion +
                            "] is referencing itself as a preceding version", null)
                    }
                    versionName = precedingVersionName;
                }
            }
        }
        return null;
    }

}</script_content>
    </property>
    <property>
      <script_language>groovy</script_language>
    </property>
  </object>
</xwikidoc>
